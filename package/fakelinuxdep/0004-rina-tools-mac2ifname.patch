diff --git a/rina-tools/configure.ac b/rina-tools/configure.ac
index 2dbd452..24e3bf1 100644
--- a/rina-tools/configure.ac
+++ b/rina-tools/configure.ac
@@ -153,6 +153,7 @@ AC_CONFIG_FILES([
     src/rina-cdap-echo/Makefile
     src/manager/Makefile
     src/common/tclap/Makefile
+    src/mac2ifname/Makefile
 
     doc/Makefile
 ])
diff --git a/rina-tools/src/Makefile.am b/rina-tools/src/Makefile.am
index 0529736..fc292e4 100644
--- a/rina-tools/src/Makefile.am
+++ b/rina-tools/src/Makefile.am
@@ -5,6 +5,7 @@
 #
 
 SUBDIRS                            = common rina-echo-time rina-cdap-echo manager
+SUBDIRS 			  += mac2ifname
 EXTRA_DIST                         =
 DISTCLEANFILES                     =
 bin_PROGRAMS                       =
diff --git a/rina-tools/src/mac2ifname/Makefile.am b/rina-tools/src/mac2ifname/Makefile.am
new file mode 100644
index 0000000..9544f4f
--- /dev/null
+++ b/rina-tools/src/mac2ifname/Makefile.am
@@ -0,0 +1,13 @@
+#
+# Makefile.am
+#
+# Written by: Vincenzo Maffione <v DOT maffione AT nextworks DOT it>
+#
+
+bin_PROGRAMS                       =
+AM_INSTALLCHECK_STD_OPTIONS_EXEMPT =
+
+mac2ifname_SOURCES  = mac2ifname.c
+
+bin_PROGRAMS            += mac2ifname
+AM_INSTALLCHECK_STD_OPTIONS_EXEMPT += mac2ifname
diff --git a/rina-tools/src/mac2ifname/mac2ifname.c b/rina-tools/src/mac2ifname/mac2ifname.c
new file mode 100644
index 0000000..19fb599
--- /dev/null
+++ b/rina-tools/src/mac2ifname/mac2ifname.c
@@ -0,0 +1,102 @@
+#include <arpa/inet.h>
+#include <sys/socket.h>
+#include <netdb.h>
+#include <ifaddrs.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <linux/if_link.h>
+#include <net/if.h>
+#include <string.h>
+
+
+static int
+get_mac_by_ifname(const char *ifname, uint8_t *hwaddr)
+{
+    struct ifreq ifr;
+    int sock;
+
+    if ((NULL == ifname) || (NULL == hwaddr)) {
+        return -1;
+    }
+
+    sock = socket(AF_INET, SOCK_STREAM, 0);
+    if (sock < 0) {
+        return -1;
+    }
+
+    strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name) - 1);
+    ifr.ifr_name[sizeof(ifr.ifr_name) - 1] = '\0';
+
+    if (ioctl(sock, SIOCGIFHWADDR, &ifr) == -1) {
+        perror("ioctl(SIOCGIFHWADDR)");
+        return -1;
+    }
+
+    memcpy(hwaddr, ifr.ifr_ifru.ifru_hwaddr.sa_data, IFHWADDRLEN);
+
+    close(sock);
+
+    return 0;
+}
+
+int main(int argc, char *argv[])
+{
+    struct ifaddrs *ifaddr, *ifa;
+    unsigned int scanfbuf[6];
+    uint8_t mac_addr_one[6];
+    uint8_t mac_addr_two[6];
+    int n;
+
+    if (argc < 2) {
+        printf("    usage: mac2ifname MAC_ADDRESS\n");
+        return -1;
+    }
+
+    n = sscanf(argv[1], "%x:%x:%x:%x:%x:%x",
+                &scanfbuf[0],
+                &scanfbuf[1],
+                &scanfbuf[2],
+                &scanfbuf[3],
+                &scanfbuf[4],
+                &scanfbuf[5]);
+    if (n != 6) {
+        printf("    invalid MAC address %s\n", argv[1]);
+        return -1;
+    }
+
+    for (n = 0; n < 6; n++) {
+        mac_addr_one[n] = (uint8_t)scanfbuf[n];
+    }
+
+    if (getifaddrs(&ifaddr) == -1) {
+        perror("getifaddrs");
+        exit(EXIT_FAILURE);
+    }
+
+    /* Walk through linked list, maintaining head pointer so we
+       can free list later */
+
+    for (ifa = ifaddr, n = 0; ifa != NULL; ifa = ifa->ifa_next, n++) {
+        if (ifa->ifa_addr == NULL)
+            continue;
+
+        get_mac_by_ifname(ifa->ifa_name, mac_addr_two);
+#if 0
+        printf("%s %02x:%02x:%02x:%02x:%02x:%02x\n", ifa->ifa_name,
+                mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3],
+                mac_addr[4], mac_addr[5]);
+#endif
+        if (memcmp(mac_addr_one, mac_addr_two, sizeof(mac_addr_one)) == 0) {
+            printf("%s\n", ifa->ifa_name);
+            freeifaddrs(ifaddr);
+
+            return 0;
+        }
+    }
+
+    freeifaddrs(ifaddr);
+
+    return -1;
+}
